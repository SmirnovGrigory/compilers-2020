-- Stack machine.

import List;
import World;
import State;
import Expr;

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N


fun eval (c, insns) {
  case c of
    [stack, st, w@[i, o]] -> case insns of
        {} -> c
      | Binop (b) : other -> case stack of x : y : nstack -> eval ([evalBinop (b, y, x) : nstack, st, w], other) esac
      | Const (n) : other -> eval ([n : stack, st, w], other)
      | Read      : other -> case i of x : it -> eval ([x : stack, st, [it, o]], other) esac
      | Write     : other -> case stack of x : nstack -> eval ([nstack, st, [i, x : o]], other) esac
      | LD    (x) : other -> eval ([st (x) : stack, st, w], other)
      | ST    (x) : other -> case stack of y : nstack -> eval ([nstack, (st <- [x, y]), w], other) esac
    esac
  esac
}


-- Runs a stack machine for a given input and a given program, returns an output

public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions

fun compileExpr (expr) {
	case expr of
		 Const (n)                -> singleton (expr)
		|Var (x)                  -> singleton (LD (x))
		|Binop (op, expr1, expr2) -> compileExpr (expr1) +++ compileExpr (expr2) +++ singleton(Binop (op))
	esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

public fun compileSM (stmt) {
	case stmt of
		  Assn (x, expr) -> compileExpr (expr) +++ singleton (ST (x)) 
		| Read (x)       -> {Read, ST (x)}
		| Write (expr)   -> compileExpr (expr) +++ singleton (Write)
		| Seq (s1, s2)   -> compileSM (s1) +++ compileSM(s2)
		| Skip           -> {}
	esac
}
