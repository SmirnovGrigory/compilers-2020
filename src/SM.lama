-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
  failure ("SM eval not implemented\n")
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}


fun eval (c, insns) {
  case c of
    [stack, st, w@[i, o]] -> case insns of
        {} -> c
      | BINOP (b) : other -> case stack of x : y : nstack -> eval ([evalBinop (b, y, x) : nstack, st, w], other) esac
      | CONST (n) : other -> eval ([n : stack, st, w], other)
      | READ      : other -> case i of x : ni -> eval ([x : stack, st, [ni, o]], other) esac
      | WRITE     : other -> case stack of x : nstack -> eval ([nstack, st, [i, x : o]], other) esac
      | LD    (x) : other -> eval ([st (x) : stack, st, w], other)
      | ST    (x) : other -> case stack of y : nstack -> eval ([nstack, (st <- [x, y]), w], other) esac
    esac
  esac
}


public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}


fun compileExpr (expr) {
  case expr of 
    Var   (x)         -> singleton (LD (x))
  | Const (n)         -> singleton (CONST (n))
  | Binop (b, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ singleton (BINOP (b))
  esac
}


public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> compileExpr (expr) +++ singleton (ST (x))
  | Read (x)       -> {READ, ST (x)}
  | Write (expr)   -> compileExpr (expr) +++ singleton (WRITE)
  | Seq (s1, s2)   -> compileSM (s1) +++ compileSM (s2)
  esac
} 

